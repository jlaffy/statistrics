source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
pipe_cluster(mat, program.cutoff=1000)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
simcut <- readRDS("~/hcsim_cut-pearson-average-1-TRUE-5-0.5-3-TRUE-1e-04-FALSE-TRUE-TRUE-50-10-TRUE-0.75-50.rds")
simcut
pipe_cluster(mat, program.cutoff=50)
hcsim_cut()
hcsim_cut
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
sim.cut <- readRDS("~/hcsim_cut-pearson-average-1-TRUE-5-0.5-3-TRUE-1e-04-FALSE-TRUE-TRUE-50-10-TRUE-0.75-50.rds")
clusters2programs(sim.cut$sig.1, cutoff=50)
sapply(sim.cut$sig.1, names)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_Cluster(mat)
pipe_ luster(mat)
pipe_cluster(mat)
pipe_cluster(mat)
programs <- pipe_cluster(mat)
programs
length(programs)
programs
dim(programs)
as.list(programs)
unlist(programs, recursive=F)
programs[[1]]
programs[[1]
programs[[1]
programs[1]
programs[,1]
length(programs[,1])
length(as.list(sapply(1:ncol(mat), function(cell) {
mean(mat[program,cell], na.rm=TRUE))
length(as.list(programs[,1]))
if (isTRUE(many)) {
result <- lapply(programs, function(program) internal.program_scoring(mat=mat, program=program)
}
}
program_scoring_m
lengths(programs[1,])
class(programs[,1])
programs <- readRDS("~/clusters2programs_pearson_average_1_TRUE_5_0.5_3_TRUE_1e-04_FALSE_TRUE_TRUE_50_10_TRUE_0.75_50.rds")
programs
df_to_list
df_to_list(programs)
df_to_list(as.data.frame(programs))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
pipe_cluster
pipe_cluster(mat)
as.list(pipe_cluster(mat))
pipe_cluster(mat)
programs <- pipe_cluster(mat)
program_scoring
scoring <- function(mat, programs, many=TRUE, center=TRUE) {
.program_scores <- function(mat, program) {
sapply(1:ncol(mat), function(cell) mean(mat[program,cell], na.rm=TRUE))
}
if (isTRUE(many)) {
result <- lapply(programs, function(program) .program_scores(mat=mat, program=program))
}
else if (!isTRUE(many) | class(programs) == 'character') {
result <- .program_scores(mat=mat, program=programs)
}
if (isTRUE(center)) result <- center(result)
result
}
prog_scores <- scoring(mat, programs)
prog_scores <- scoring(mat, programs, many=T, center=T)
unique(unlist(names(programs))) %in% rownames(mat)
unique(names(programs))
programs
sapply(programs, names)
programs[[1]]
scoring(mat=mat, programs=programs)
prog_scores <- scoring(mat=mat, programs=programs)
head(mat)
class(progrmas)
class(progra,s)
class(programs)
class(programs[[1]]))
class(programs[[1]])
programs[[1]]
programs
unlist(programs)
unique(unlist(programs))
unique(unlist(programs)) %in% rownames(mat)
all(unique(unlist(programs)) %in% rownames(mat))
any(!unique(unlist(programs)) %in% rownames(mat))
unique(unlist(programs))[any(!unique(unlist(programs)) %in% rownames(mat))]
unique(unlist(programs))[!any(unique(unlist(programs)) %in% rownames(mat))]
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R')
mat
mat <- readRDS("../../PDX_2/xeno.mat.logtpm.rds")
method.cor='pearson'
method.hc='average'
dissim.dist=1
do.call('hcluster:hcluster', list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
do.call(hcluster:hcluster, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-.R', echo=TRUE)
do.call(hcluster, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
fnName='hcluster'
do.call(fnName, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
getwd()
setwd("..")
getwd()
usethis::create_package("cache_call")
usethis::create_package("cacheCall")
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
?cachePath
?cacheCall
?makeFilename
#' @param n.sig.2
#' @param sim.cut
#' @param jac.out
#' @param jac.cut
#' @param program.cutoff
#'
#' @return
#' @export
#'
#' @examples
main <- function(mat,
pipeName="main",
cachePath="~/",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
sig.cut=TRUE,
n.sig.1=50,
n.sig.2=10,
sim.cut=TRUE,
jac.out=NULL,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
hc <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcluster', args=args, cachePath=cachePath,
mat=mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist)
k <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcutree', args=args, cachePath=cachePath,
hc=hc, h=hc$height, clean=size.cut, min=min.size, max=max.size)
hcsigObj <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsig', args=args, cachePath=cachePath,
k=k, mat=mat, fc.value=fc.value, p.value=p.value, fc.sort=fc.sort,
pval.sort=pval.sort, reorder=reorder.by.sig)
hcsigCut <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsig_cut', args=args, cachePath=cachePath,
obj=hcsigObj, n.sig.1=n.sig.1, n.sig.2=n.sig.2)
hcsimCut <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsim_cut', args=args, cachePath=cachePath,
obj=hcsigCut, jac.out=jac.out, jac.cut=jac.cut)
Programs <- cacheCall::cacheCall(pipeName=pipeName, fnName='programs', args=args, cachePath=cachePath,
v=hcsimCut$sig.1, cutoff=program.cutoff)
Programs
}
?cacheCall
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
?hcluster::hcluster
?hcluster::hcluster
usethis::create_package("piper")
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R')
install.packages('roxygen2')
devtools::load_all(".")
install.packages('stringi', dep=T)
packrat::disable()
ls
list.files
list.files()
remove.packages('roxygen')
remove.packages('roxygen2md')
devtools::load_all(".")
devtools::load_all(".")
usethis::use_package("reshape2")
usethis::use_package("reshape2")
devtools::load_all(".")
?main
warnings()
?main
usepackage::use_this("cacheCall")
usethis::use_package("cacheCall")
?roxygen2
main <- function(mat,
pipeName="main",
cachePath=".",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
n.sig.1=50,
n.sig.2=10,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
args}
main <- function(mat,
pipeName="main",
cachePath=".",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
n.sig.1=50,
n.sig.2=10,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
args}
main <- function(mat,
pipeName="main",
cachePath=".",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
n.sig.1=50,
n.sig.2=10,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
args}
main <- function(mat,
pipeName="main",
cachePath=".",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
n.sig.1=50,
n.sig.2=10,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
args
}
main(mat=1)
main(mat=1)[1:4]
length(main(mat=1))
devtools::load_all()
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/TODO.R')
statistrics::hcsig
devtools::load_all(".")
statistrics::hcsig
statistrics::DEgenes
?do.call
?is.list
?do.call
rm(list=ls())
mat_by_tum <- readRDS("../../GBM/mat_by_tum.rds")
names(mat_by_tum)
devtools::load_all(".")
class(mat_by_tum)
max(mat_by_tum[[1]])
max(mat_by_tum[[5]])
mean(mat_by_tum[[1]])
mean(mat_by_tum[[1]][,1])
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
devtools::load_all(".")
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
setwd("tmp")
list.files(())
list.files(
)
devtools::load_all(".")
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
devtools::load_all(".")
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
devtools::load_all(".")
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7)
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7, score=F)
getwd()
devtools::load_all(".")
Programs <- statistrics::main(mat=mat_by_tum, p.value=10^(-4), jac.cut=0.7, score=F)
ls()
length(mat_by_tum)
length(mat_by_tum[[29]])
dim(mat_by_tum[[29]])
length(names(mat_by_tum))
names(mat_by_tum[29])
args(main)
args(statistrics::main)
as.list(args(statistrics::main))
as.list(args(statistrics::main(pval.cutoff=2)))
as.list(args(statistrics::main(p.value=2)))
as.list(args(statistrics::main(mat=NULL,p.value=2)))
as.list(args(statistrics::main(mat=,p.value=2)))
devtools::load_all('.')
as.list(args(statistrics::main(mat=NULL,p.value=2)))
as.list(args(statistrics::main(mat=NULL,p.value=2)))
devtools::load_all('.')
as.list(args(statistrics::main(mat=NULL,p.value=2)))
source('R/helper-main.R')
Args(FUN=main)
Args()
args(Args)
Args(FUN='statistrics::main')
quote('main')
eva;('main')
eval('main')
eval(quote('main'))
eval(substitute('main'))
args(main)
list(args(main))
as.list(args(main))
source('R/helper-main.R')
Args()
Args(FUN='statistrics::main')
call('main')
args(call('main'))
args(noquote('main'))
source('R/helper-main.R')
Args(FUN='statistrics::main')
Args()
source('R/helper-main.R')
Args(FUN='statistrics::main')
source('R/helper-main.R')
Args()
as.list(args(main))
FUN=main
as.list(args(FUN))
?args
source('R/helper-main.R')
Args()
source('R/helper-main.R')
Args()
formals(fun=main, environemnt=evironment(fun))
formals(fun=main, environemnt=evironment(main))
formals(fun=main, environment=evironment(main))
formals(fun=main)
formals(fun=main)
source('R/helper-main.R')
Args()
Args(FUN=sum)
Args(FUN=sum())
source('R/helper-main.R')
Args(FUN=sum)
Args(FUN=sum, 2, 2)
Args(FUN=sum, 2, 2)
Args(FUN=sum)
source('R/helper-main.R')
Args(FUN=sum, 2, 2)
Args(FUN=sum, 2, 2, 2)
Args(FUN=sum, 2, 23, 2)
Args(FUN=sum, 2, 23, x=2)
Args(FUN=sum, c(2, 23, x=2)
)
Args(FUN=sum, c(z=2, y=23, x=2)
Args(FUN=sum, z=2, y=23, x=2)
cacheCall:cacheCall
cacheCall::cacheCall
source('R/helper-main.R')
Args(FUN=sum, z=2, y=23, x=2)
Args(FUN=sum, 2,2,2)
source('R/helper-main.R')
Args(FUN=main, p.value=2)
Args(FUN=main, p.value=2, program.cutoff=1000000)
Args(sum)
args(sum)
names(args(sum))
source('R/helper-main.R')
Args(sum)
Args(mean)
Args(mean, 2)
Args(mean, 2, 5)
source('R/helper-main.R')
Args(mean, 2, 5)
?mean
formals(sum)
formals(mean)
?lengths
source('R/helper-main.R')
Args(sum)
Args(mean, 2, 2)
Args(mean, 2, 2, 2, 2)
Args(sum, 2)
Args(sum, 2,2,2,)
Args(sum, 2,2,2)
Args(main)
source('R/helper-main.R')
Args(main)
string <- function(args, argNames=FALSE, sep=":", collapse="_") {
if (isTRUE(argNames)) {
args <- lapply(1:length(args), function(i) paste(names(args)[i], args[[i]], sep=sep))
}
paste(args, collapse=collapse)
}
string(Args(main))
names(Args(main))
names(Args(main), argNames=T)
string(Args(main), argNames=T)
makeFilename <- function(args, pipeName=NULL, fnName=NULL, cachePath=".", sep=":", collapse="__", argNames=FALSE) {
if (stringr::str_sub(cachePath, -1) != "/") {
cachePath <- paste(cachePath, "/", sep="")
}
components <- c(pipeName, fnName, args)
String <- string(args=components, argNames=argNames, sep=sep, collapse=collapse)
print(paste(cachePath, String, ".rds", sep=""))
paste(cachePath, String, ".rds", sep="")
}
makeFilename(args=Args(main))
c(NULL,NULL)
c(NULL,NULL, 'd')
Args(main)
Args(main)
dots <- Args(main)
sapply(dots, is.character)
sapply(dots, is.character | is.numeric)
sapply(dots, !c(is.matrix, is.data.frame))
sapply(dots, !is.matrix)
sapply(dots, is.matrix)
sapply(dots, is.data.frame)
Args(main)
devtools::load_all('.')
devtools::load_all('.')
Args(main)
devtools::load_all('.')
Args(main, except='mat')
Args(main, except='mat')
args <- Args(main, except='mat')
args[-"mat"]
devtools::load_all('.')
args <- Args(main, except='mat')
head(args)
names(args)
names(args) %in% 'mat'
args[names(args) %in% 'mat']
args[!names(args) %in% 'mat']
devtools::load_all('.')
args <- Args(main, except='mat')
args
devtools::load_all('.')
Args
source('R/helper-main.R')
args <- Args(main, except='mat')
args
Args(main)
source('R/helper-main.R')
Args(main)
string(Args(main))
makeFilename(Args(main))
source('R/helper-main.R')
makeFilename(Args(main))
stirng(Args(main))
string(Args(main))
usethis::use_package('stringr')
