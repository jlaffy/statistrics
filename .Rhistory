}
if (!is.null(mat)) {
hc <- hcluster(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist)
}
if (!is.null(hc)) {
k <- hcutree(hc, h=hc$height, clean=size.cut, min=min.size, max=max.size)
}
if (!is.null(k)) {
hcsigObj <- hcsig(k=k, mat=mat, fc.value=fc.value, p.value=p.value, fc.sort=fc.sort, pval.sort=pval.sort, reorder=reorder.by.sig)
}
if (!is.null(hcsigObj)) {
hcsigCut <- hcsig_cut(obj=hcsigObj, n.sig.1=n.sig.1, n.sig.2=n.sig.2)
}
if (!is.null(hcsigCut)) {
hcsimCut <- hcsim_cut(obj=hcsigCut, jac.out=jac.out, jac.cut=jac.cut)
}
if (!is.null(hcsimCut)) {
programs <- clusters2programs(vect=hcsimCut$sig.1, cutoff=program.cutoff)
}
hcsigObj <- hcsig(k=k, mat=mat, fc.value=fc.value, p.value=p.value, fc.sort=fc.sort, pval.sort=pval.sort, reorder=reorder.by.sig)
hcsigCut <- hcsig_cut(obj=hcsigObj, n.sig.1=n.sig.1, n.sig.2=n.sig.2)
hcsimCut <- hcsim_cut(obj=hcsigCut, jac.out=jac.out, jac.cut=jac.cut)
programs <- clusters2programs(vect=hcsimCut$sig.1, cutoff=program.cutoff)
list(original=hcsigObj, A=hcsigCut, B=hcsimCut, programs=programs)
}
pipe_cluster(mat)
args(pipe_cluster(mat))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
args(pipe_cluster(mat))
args(pipe_cluster
)
as.list(args(pipe_cluster))
formals(pipe_cluster)
formals(pipe_cluster(mat))
args(pipe_cluster(mat))
pipe_cluster
pipe_cluster(mat)
match.call
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
output <- pipe_cluster(mat)
length(output)
str(output)
as.vector(output)
as.vector(output)
output[1]
output[2]
output[3]
output[4]
output[5]
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
pipe_cluster(mat, min.size=10)
?formals
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, min.size=10)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, min.size=10)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, min.size=10)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, min.size=10)
pipe_cluster(mat, min.size=10, sig.cut=F)
output <- pipe_cluster(mat, min.size=10, sig.cut=F)
names(output[1:6])
output[-c("mat")]
output[-c("mat", "k")]
output[-1:6]
output[-c(1:6)]
succint <- output[-c(1:6)]
for (i in 1:length(succint)) {}
for (i in 1:length(succint)) {
paste(names(succint)[i], succint[[i]], sep="_")
}
for (i in 1:length(succint)) {
print(paste(names(succint)[i], succint[[i]], sep="_"))
}
out <- for (i in 1:length(succint)) {
print(paste(names(succint)[i], succint[[i]], sep="_"))
}
out
out <- for (i in 1:length(succint)) {
print(paste(names(succint)[i], succint[[i]], sep="_"))
out <- c()
for (i in 1:length(succint)) {
out <- c(out, paste(names(succint)[i], succint[[i]], sep="_"))
}
out
do.call(paste, out, sep="-")
do.call(paste, out)
paste(out, sep="-")
do.call(out, paste)
do.call(paste, out)
do.call(paste, as.list(out))
do.call(paste, as.list(out), sep="-")
do.call(paste, sep="-" as.list(out))
do.call(paste, sep="-", as.list(out))
?paste
paste(as.list(out), sep="")
paste(as.list(out), sep="-")
paste(out, sep="-")
print(paste(out, sep="-"))
do.call(paste(out, sep="-"))
do.call
?do.call
do.call(paste, as.list(out, sep=""))
do.call(paste, as.list(out, sep="-"))
do.call(paste, args=list(as.list(out), sep="-"))
paste(out, collapse="")
paste(out, collapse="-")
paste(out, collapse="__")
paste(out, collapse=":")
paste(out, collapse=",")
output
names(output)
names(output)[-c(1:6, 23)]
names(output)[-c(1:6, 22)]
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
output <- pipe_cluster(mat)
output
length(output)
length(out)
arguments
out
output
lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=:))
lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":"))
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="_"
)
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="..")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="...")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="--")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="__")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep="-")), collapse="--")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep="_")), collapse="--")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="--")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="-::")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="::")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="---")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="_")
paste(lapply(1:length(output), function(i) paste(names(output)[i], output[[i]], sep=":")), collapse="__")
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
as.string(pipe_cluster(mat))
as.character(pipe_cluster(mat))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
lsf.str()
debugSource('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster()
pipe_cluster(mat)
ls()
args
funs
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
funs
args
funs[1]
c(funs[1], args)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
funs
paste(names(funs)[1], funs[[1]])
paste(names(funs)[1], funs[[1]], sep=":")
lapply(1:length(funs), function(i) args2str(args=c(funs[i], args)))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
match.call(eval)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
match.call(eval)
pipe_cluster(mat)
call('hcluster', mat, method.cor='pearson', method.hc='average', dissim.dist=1 )
called <- call('hcluster', mat, method.cor='pearson', method.hc='average', dissim.dist=1 )
str(calleD)
str(called)
called[1]
as.string(quote(called[1]))
as.character(quote(called[1]))
as.character(called[1])
length(called)
eval(called)
called[5]
called[3]
called[4]
funs <- list("hcluster", "hcutree", "hcsig", "hcsig_cut", "hcsim_cut", "clusters2programs")
which(funs == 'programs')
as.vector(funs)
unlist(funs)
funs <- unlist(funs)
which(funs == 'programs')
which(funs == 'hcutree')
ARGS
args
arguments
args
ouput
output
c(output, fun1='sd)'
c(output, fun1='sd')
ls()
called
called[1]
as.caharacter(quote(called[1]))
as.character(quote(called[1]))
as.character(called[1])
ls
ls()
list.files()
file.exists("DESCRIPTION")
file.exists("statistrics")
file.exists("statistrics.Rproj")
endswith("path2cache")
library(Stringr)
library(stringr)
sub_string("statistrics", -1)
str_sub("statistrics", -1)
str_sub("statistrics", -1, -1)
str_sub("statistrics", -2)
str_sub("statistrics", -2, -2)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat
)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
)
pipe_cluster(mat
)
print(fun)
make_filename_title <- function(function_call) {
funs <- c("hcluster", "hcutree", "hcsig", "hcsig_cut", "hcsim_cut", "clusters2programs")
fun <- as.character(function_call[1])
names(fun) <- which(funs == fun)
print(fun)
}
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
getwd()
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
?saveRDS
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
class(returning)
class(filename)
filename
names(fun) <- as.character(which(funs == fun))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
list.files("~/)")
list.files("~/")
else if (!file.exists(filename)) {
returning <- eval(function_call)
saveRDS(returning, file=filename)
}
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster()
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
?Sys.time
system.time
?system.time
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, path2cache="")
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
pipe_cluster(mat, program.cutoff=1000)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
simcut <- readRDS("~/hcsim_cut-pearson-average-1-TRUE-5-0.5-3-TRUE-1e-04-FALSE-TRUE-TRUE-50-10-TRUE-0.75-50.rds")
simcut
pipe_cluster(mat, program.cutoff=50)
hcsim_cut()
hcsim_cut
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
sim.cut <- readRDS("~/hcsim_cut-pearson-average-1-TRUE-5-0.5-3-TRUE-1e-04-FALSE-TRUE-TRUE-50-10-TRUE-0.75-50.rds")
clusters2programs(sim.cut$sig.1, cutoff=50)
sapply(sim.cut$sig.1, names)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat, program.cutoff=50)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_Cluster(mat)
pipe_ luster(mat)
pipe_cluster(mat)
pipe_cluster(mat)
programs <- pipe_cluster(mat)
programs
length(programs)
programs
dim(programs)
as.list(programs)
unlist(programs, recursive=F)
programs[[1]]
programs[[1]
programs[[1]
programs[1]
programs[,1]
length(programs[,1])
length(as.list(sapply(1:ncol(mat), function(cell) {
mean(mat[program,cell], na.rm=TRUE))
length(as.list(programs[,1]))
if (isTRUE(many)) {
result <- lapply(programs, function(program) internal.program_scoring(mat=mat, program=program)
}
}
program_scoring_m
lengths(programs[1,])
class(programs[,1])
programs <- readRDS("~/clusters2programs_pearson_average_1_TRUE_5_0.5_3_TRUE_1e-04_FALSE_TRUE_TRUE_50_10_TRUE_0.75_50.rds")
programs
df_to_list
df_to_list(programs)
df_to_list(as.data.frame(programs))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
pipe_cluster(mat)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
pipe_cluster
pipe_cluster(mat)
as.list(pipe_cluster(mat))
pipe_cluster(mat)
programs <- pipe_cluster(mat)
program_scoring
scoring <- function(mat, programs, many=TRUE, center=TRUE) {
.program_scores <- function(mat, program) {
sapply(1:ncol(mat), function(cell) mean(mat[program,cell], na.rm=TRUE))
}
if (isTRUE(many)) {
result <- lapply(programs, function(program) .program_scores(mat=mat, program=program))
}
else if (!isTRUE(many) | class(programs) == 'character') {
result <- .program_scores(mat=mat, program=programs)
}
if (isTRUE(center)) result <- center(result)
result
}
prog_scores <- scoring(mat, programs)
prog_scores <- scoring(mat, programs, many=T, center=T)
unique(unlist(names(programs))) %in% rownames(mat)
unique(names(programs))
programs
sapply(programs, names)
programs[[1]]
scoring(mat=mat, programs=programs)
prog_scores <- scoring(mat=mat, programs=programs)
head(mat)
class(progrmas)
class(progra,s)
class(programs)
class(programs[[1]]))
class(programs[[1]])
programs[[1]]
programs
unlist(programs)
unique(unlist(programs))
unique(unlist(programs)) %in% rownames(mat)
all(unique(unlist(programs)) %in% rownames(mat))
any(!unique(unlist(programs)) %in% rownames(mat))
unique(unlist(programs))[any(!unique(unlist(programs)) %in% rownames(mat))]
unique(unlist(programs))[!any(unique(unlist(programs)) %in% rownames(mat))]
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R')
mat
mat <- readRDS("../../PDX_2/xeno.mat.logtpm.rds")
method.cor='pearson'
method.hc='average'
dissim.dist=1
do.call('hcluster:hcluster', list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
do.call(hcluster:hcluster, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-.R', echo=TRUE)
do.call(hcluster, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
fnName='hcluster'
do.call(fnName, list(mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist))
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
getwd()
setwd("..")
getwd()
usethis::create_package("cache_call")
usethis::create_package("cacheCall")
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R')
?cachePath
?cacheCall
?makeFilename
#' @param n.sig.2
#' @param sim.cut
#' @param jac.out
#' @param jac.cut
#' @param program.cutoff
#'
#' @return
#' @export
#'
#' @examples
main <- function(mat,
pipeName="main",
cachePath="~/",
sep=":",
collapse="_",
method.cor="pearson",
method.hc="average",
dissim.dist=1,
size.cut=TRUE,
min.size=5,
max.size=0.50,
fc.value=3,
fc.sort=TRUE,
p.value=10^(-4),
pval.sort=FALSE,
reorder.by.sig=TRUE,
sig.cut=TRUE,
n.sig.1=50,
n.sig.2=10,
sim.cut=TRUE,
jac.out=NULL,
jac.cut=0.75,
program.cutoff=50) {
if (is.null(mat)) stop("'Mat' must be provided.")
args <- as.list(environment())[-c(1:4, 20)]
hc <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcluster', args=args, cachePath=cachePath,
mat=mat, method.cor=method.cor, method.hc=method.hc, dissim.dist=dissim.dist)
k <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcutree', args=args, cachePath=cachePath,
hc=hc, h=hc$height, clean=size.cut, min=min.size, max=max.size)
hcsigObj <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsig', args=args, cachePath=cachePath,
k=k, mat=mat, fc.value=fc.value, p.value=p.value, fc.sort=fc.sort,
pval.sort=pval.sort, reorder=reorder.by.sig)
hcsigCut <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsig_cut', args=args, cachePath=cachePath,
obj=hcsigObj, n.sig.1=n.sig.1, n.sig.2=n.sig.2)
hcsimCut <- cacheCall::cacheCall(pipeName=pipeName, fnName='hcsim_cut', args=args, cachePath=cachePath,
obj=hcsigCut, jac.out=jac.out, jac.cut=jac.cut)
Programs <- cacheCall::cacheCall(pipeName=pipeName, fnName='programs', args=args, cachePath=cachePath,
v=hcsimCut$sig.1, cutoff=program.cutoff)
Programs
}
?cacheCall
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-processing.R', echo=TRUE)
?hcluster::hcluster
?hcluster::hcluster
usethis::create_package("piper")
source('/Volumes/tirosh/sbjulie/R-packages/statistrics/R/cluster-significance.R')
install.packages('roxygen2')
devtools::load_all(".")
install.packages('stringi', dep=T)
packrat::disable()
ls
list.files
list.files()
remove.packages('roxygen')
remove.packages('roxygen2md')
devtools::load_all(".")
